package delivery

import (
	"log"
	"log/slog"
	"strings"
	"time"

	"certificate/internal/ports"

	"github.com/tucnak/telebot"
)

type Bot struct {
	bot     *telebot.Bot
	svc     ports.RegistrationService
	baseURL string
	admins  map[int]struct{}
}

func NewBot(token string, svc ports.RegistrationService, baseURL string, adminIDs []int) (*Bot, error) {
	b, err := telebot.NewBot(telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		return nil, err
	}

	adminMap := make(map[int]struct{}, len(adminIDs))
	for _, id := range adminIDs {
		adminMap[id] = struct{}{}
	}

	return &Bot{bot: b, svc: svc, baseURL: baseURL, admins: adminMap}, nil
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
func (b *Bot) isAdmin(userID int) bool {
	_, exists := b.admins[userID]
	return exists
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
func (b *Bot) Start() {
	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
	b.bot.Handle("/register", func(m *telebot.Message) {
		if !b.isAdmin(m.Sender.ID) {
			slog.Error("–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞, –ª–∏—Ü–æ–º –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", "ID", m.Sender.ID)
			b.bot.Send(m.Sender, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
			return
		}

		link, err := b.svc.GenerateUniqueLink(b.baseURL)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏", "error", err)
			b.bot.Send(m.Sender, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
			return
		}
		b.bot.Send(m.Sender, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: "+link)
	})

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–∫–µ–Ω—É
	b.bot.Handle("/check_token", func(m *telebot.Message) {
		if !b.isAdmin(m.Sender.ID) {
			slog.Error("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–≤–æ–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞, –ª–∏—Ü–æ–º –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", "ID", m.Sender.ID)
			b.bot.Send(m.Sender, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
			return
		}

		b.bot.Send(m.Sender, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
	b.bot.Handle(telebot.OnText, func(m *telebot.Message) {
		if !b.isAdmin(m.Sender.ID) {
			return
		}

		// –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É
		usage, err := b.svc.GetTokenUsage(m.Text)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", "error", err)
			b.bot.Send(m.Sender, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		response := "–î–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É:\n"
		response += "üë§ –ò–º—è: " + usage.Username + "\n"
		response += "üìû –¢–µ–ª–µ—Ñ–æ–Ω: " + usage.Phone

		b.bot.Send(m.Sender, response)
	})

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
	b.bot.Handle("/used_tokens", func(m *telebot.Message) {
		if !b.isAdmin(m.Sender.ID) {
			slog.Error("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤, –ª–∏—Ü–æ–º –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", "ID", m.Sender.ID)
			b.bot.Send(m.Sender, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
			return
		}

		tokens, err := b.svc.GetUsedTokens()
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤", "error", err)
			b.bot.Send(m.Sender, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
			return
		}

		if len(tokens) == 0 {
			b.bot.Send(m.Sender, "–ù–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
			return
		}

		response := "üìå *–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:*\n"
		for _, t := range tokens {
			escapedToken := strings.ReplaceAll(t.Token, "`", "\\`")
			response += "üîπ `" + escapedToken + "`\n"
		}

		b.bot.Send(m.Sender, response, &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
	})

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
	b.bot.Handle("/unused_tokens", func(m *telebot.Message) {
		if !b.isAdmin(m.Sender.ID) {
			slog.Error("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤, –ª–∏—Ü–æ–º –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", "ID", m.Sender.ID)
			b.bot.Send(m.Sender, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
			return
		}

		tokens, err := b.svc.GetUnusedTokens()
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤", "error", err)
			b.bot.Send(m.Sender, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
			return
		}

		if len(tokens) == 0 {
			b.bot.Send(m.Sender, "–ù–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
			return
		}

		response := "üìå *–°–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:*\n"
		for _, t := range tokens {
			escapedToken := strings.ReplaceAll(t.Token, "`", "\\`")
			response += "üü¢ `" + escapedToken + "`\n"
		}

		b.bot.Send(m.Sender, response, &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
	})

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
	b.bot.Start()
}
